-----------------
Encoding Schemes
-----------------

URL encoding
------------

URLs are permitted to contain only printable US-ASCII characters (in the range 0x20 to 0x7e).
Furthermore, several characters in the range are prohibited because they have special meanings
within the URL scheme itself or the HTTP protocol.

URL encoded characters are often in the form of % followed by the character's 2 two-digit ASCII 
code expression in hexadecimal.

Examples:

%3D -> =
%25 -> %
%20 -> Whitespace
%0A -> New Line
%00 -> Null Byte

-----------------------------------------------------------------------------------------------------

Unicode Encoding
----------------

Unicode is a character encoding standard that is designed to support all of the world‚Äôs writing systems.
It employs various encoding schemes, some of which can be used to represent unusual characters in web applications.

Unicode encoded characters are in the form of %u followed by the character's Unicode code point expressed
in hexadecimal.

Examples:

%u2215 -> /
%u00e9 -> √©

UTF-8 is a variable-length encoding standard that employs one or more bytes to express each character.
For transmission over HTTP, the UTF-8-encoded form of a multibyte character simply uses each byte 
expressed in hexadecimal and preceded by the % prefix.

Examples:

%c2%a9 ‚Äî> ¬©

For the purpose of attacking web applications, Unicode encoding is primarily
of interest because it can sometimes be used to defeat input validation mechanisms.
If an input fi lter blocks certain malicious expressions, but the component
that subsequently processes the input understands Unicode encoding, it may
be possible to bypass the fi lter using various standard and malformed Unicode
encodings.Ì±∫

-----------------------------------------------------------------------------------------------------

HTML Encoding
-------------

HTML is used to convert problematic characters into their equivalent HTML entities, so that they
appear on the document in their actual form and not as code characters.

Examples:

&quot; -> "
&amp; -> &
&gt; -> >
&lt; -> <
&apos; -> '

Additionally, any character can be encoded using their ASCII codes in decimal form.

Examples:

&#34; -> "
&#39; -> '

Or by using their ASCII codes in hexadecimal form.

Examples:

&#x22; -> "
&#x27; -> '

-----------------------------------------------------------------------------------------------------

Base64 Encoding
---------------

Base64 encoding allows any binary data to be safely represented using only
printable ASCII characters. It is commonly used to encode e-mail attachments
for safe transmission over SMTP. It is also used to encode user credentials in
basic HTTP authentication.

Base64 encoding processes input data in blocks of three bytes. Each of these
blocks is divided into four chunks of six bits each. Six bits of data allows for 64
different possible permutations, so each chunk can be represented using a set
of 64 characters. Base64 encoding employs the following character set, which
contains only printable ASCII characters:

ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/

If the fi nal block of input data results in fewer than three chunks of output
data, the output is padded with one or two = characters.

Example:

VGhlIFdlYiBBcHBsaWNhdGlvbiBIYWNrZXIncyBIYW5kYm9vaw==

-----------------------------------------------------------------------------------------------------

Hex Encoding
------------

Many applications use straightforward hexadecimal encoding when transmitting
binary data, using ASCII characters to represent the hexadecimal block.

For example, hex-encoding the username ‚Äúdaf‚Äù within a cookie would result
in this:

646166