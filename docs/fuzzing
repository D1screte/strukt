=====================
| Brief Description |
=====================

Fuzz analysis is a software-testing technique used by auditors and developers
	to test their applications against unexpected, invalid, and random sets of data input.
	The response will then be noticed in terms of an exception or a crash thrown by these applications.
	This activity uncovers some of the major vulnerabilities in the software, which are not possible
	to discover otherwise.
	These vulnerabilities include buffer overflows, format strings, code injections, dangling pointers,
	race conditions, and many other types of vulnerabilities.

There are different classes of fuzzers available, which can be used to test file formats,
	network protocols, command line inputs, enviromental variables, and web applications.
	Any untrusted source of data input is considered to be insecure and inconsistent.
	For instance, a trust boundary between the application and the Internet user is unpredictable.
	Thus, all the data inputs should be fuzzed and verified against known and unknown vulnerabilities.

=============================================================================================================

=================
| Fuzzing Tools |
=================

	- Bruteforce Exploit Detector
		Bruteforce Exploit Detector (BED) is a powerful tool designed to fuzz the plain text
			protocols against potential buffer overflows, format string bugs, integer overflows,
			DoS conditions, and so on. It automatically tests the implementation of a chosen
			protocol by sending different combinations of commands with problematic strings 
			to confuse the target.
			BED supports FTP, SMTP, POP, HTTP, IRC, IMAP, PJL, LPD, Finger, SOCKS4, and SOCKS5.

	- JBroFuzz
		JBroFuzz is a well-known platform to fuzzy test web applications. 
			It supports web requests over the HTTP and HTTPS protocol. 
			By providing a simple URL for the target domain and selecting the part of a web request to fuzz,
			an auditor can either select to craft the manual request or use the predefined set of payloads database
		    (for example, cross-site scripting, SQL injection, buffer overflow, format string errors, and so on) 
	   	  	to generate some malicious requests based on the previously known vulnerabilities and send them to the target web server. The corresponding responses will then be recorded for further inspection.
			Based on the type of testing that is performed, these responses or results should be manually investigated in order to
			recognize any possible exploit condition.

		The key options provided under JBroFuzz are fuzz management, payload categories,
		sniffing the web requests and replies through browser proxy, and enumerating
		the web directories. Each of these has unique functions and capabilities to handle
		application protocol fuzzing.

=============================================================================================================

================
| SMB Analysis |
================

Server Message Block (SMB) is an application-layer protocol, which is commonly
	used to provide file and printer sharing services. 
	Moreover, it is also capable of handling the shared services between serial ports and laid miscellaneous
	communications between different nodes on the network.
	 It is also known as CIFS (Common Internet File System).

SMB is purely based on a client-server architecture and has been implemented
	on various operating systems such as Linux and Windows. 
	Network Basic Input Output System (NetBIOS) is an integral part of the SMB protocol, which
	implements the transport service on Windows systems.
	 NetBIOS runs on top of the TCP/IP protocol (NBT) and thus allows each computer with a unique network name
	and IP address to communicate over Local Area Network (LAN).

Additionally, the DCE/RPC service uses SMB as a channel for authenticated
	inter-process communication (IPC) between network nodes.
	This phenomenon allows the communication between processes and computers to share data on the
	authenticated channel.
	The NetBIOS services are commonly offered on various TCP and UDP ports (135, 137, 138, 139, and 445).
	Due to these superior capabilities and weak implementation of the SMB protocol,
	it has always been a chief target for hackers.
	The number of vulnerabilities have been reported in past, which could
	be advantageous to compromise the target. The tools presented in this section will
	provide us with useful information about the target, such as the hostname, running
	services, domain controller, MAC address, OS type, current users logged in, hidden
	shares, time information, user groups, current sessions, printers, available disks,
	and much more.

	- Impacket Samrdump
		Samrdump is an application that retrieves sensitive information about the specified
			target using Security Account Manager (SAM), which is a remote interface that is
			accessible under the Distributed Computing Environment / Remote Procedure
			Calls (DCE/RPC) service.
			It lists out all the system shares, user accounts, and other useful information about
			the target's presence in the local network.

		Samrdump is located in /usr/share/doc/python-impacket/examples/samrdump.py

=============================================================================================================

=================
| SNMP analysis |
=================

Simple Network Management Protocol (SNMP) is an application-layer protocol
that is designed to run on the UDP port 161.

Its main function is to monitor all the network devices for conditions that may require administrative attention,
such as a power outage or an unreachable destination. 

The SNMP-enabled network typically consists of network devices, a manager, and an agent.

A manager controls the administrative tasks for the network management and
monitoring operations.

An agent is a software that runs on the network devices, and
these network devices could involve routers, switches, hubs, IP cameras, bridges,
and sometimes operating system machines (Linux, Windows).
These agent-enabled devices report information about their bandwidth, uptime, running processes,
network interfaces, system services, and other crucial data to the manager via SNMP.

The information is transferred and saved in the form of variables that describe the
system configuration.

These variables are organized in systematic hierarchies known
as Management Information Bases (MIBs), where each variable is identified with a
unique Object Identifier (OID).

A total of three versions are available for SNMP (v1, v2, v3).

From a security point of view, v1 and v2 were designed to handle communitybased
security scheme, whereas v3 enhanced this security function to provide better
confidentiality, integrity, and authentication.
The tools that we present in this section will mainly target v1- and v2c-based SNMP devices.

	- SNMP Walk
	SNMP Walk is a powerful information-gathering tool.
	It extracts all the device configuration data, depending on the type of device that is under examination.
	Such data is very useful and informative in terms of launching further attacks and
	exploitation attempts against the target.
	Moreover, the SNMP Walk is capable of retrieving a single group MIB data or specific OID value.

=============================================================================================================

============================
| Web Application Analysis |
============================

Most applications that are developed these days integrate different web technologies,
which increases the complexity and risk of exposing sensitive data.
Web applications have always been a long-standing target for malicious adversaries to steal,
manipulate, sabotage, and extort the corporate business. 
This proliferation of web applications has put forth enormous challenges for penetration testers. 
The key is to secure both web applications (front-end) and databases (back-end) on top of the
network security countermeasures. 
This is necessary because web applications act as a data-processing system and the database is responsible for storing sensitive data
(for example, credit cards, customer details, authentication data, and so on).

	- DBPwAudit
		DBPwAudit is a Java-based tool designed to audit passwords for Oracle, MySQL,
		MS-SQL, and IBM DB2 servers. 
		The application design is greatly simplified to allow us to add more database technologies, as required. 
		It helps the pentester to discover valid user accounts on the database management system, if not hardened with a
		secure password policy. 
		It currently supports the dictionary-based password attack mechanism.

	- SQLMap
		SQLMap is an advanced and automatic SQL injection tool. 
		Its main purpose is to scan, detect, and exploit the SQL injection flaws for a given URL. 
		It currently supports various database management systems (DBMS) such as MS-SQL, MySQL,
		Oracle, and PostgreSQL. 
		It is also capable of identifying other database systems, such as DB2, Informix, Sybase, InterBase, and MS-Access. 
		SQLMap employs four unique SQL injection techniques; these include inferential blind SQL injection, UNION
		query SQL injection, stacked queries, and time-based blind SQL injection. 
		Its broad range of features and options include database fingerprinting, enumerating, data
		extracting, accessing the target filesystem, and executing the arbitrary commands
		with full operating system access. 
		Additionally, it can parse the list of targets from Burp proxy or WebScarab logs as well as the standard text file.
		SQLMap also provides an opportunity to scan the Google search engine with classified Google
		dorks to extract specific targets.


		SQLMap's set of options has been divided into 11 logical categories: target specification,
		connection request parameters, injection payload, injection techniques, fingerprinting,
		enumeration options, user-defined function (UDF) injection, filesystem access,
		operating system access, Windows registry access, and other miscellaneous options.

		By default, SQLMap will scan all the available parameters (GET, POST, HTTP, Cookie, and User-Agent)
		of a url, but we can restrict this option by defining the exact parameter '-p "[parameter]"' to be tested.

	- SQL Ninja
		SQL Ninja is a specialized tool that is developed to target those web applications that
		use MS-SQL Server on the back-end and are vulnerable to SQL injection flaws.
		Its main goal is to exploit these vulnerabilities to take over the remote database server
		through an interactive command shell instead of just extracting the data out of the
		database. 
		It includes various options to perform this task, such as server fingerprint,
		password brute force, privilege escalation, upload remote backdoor, direct shell,
		backscan connect shell (firewall bypass), reverse shell, DNS tunneling, single
		command execution, and Metasploit integration. 
		Thus, it is not a tool that scans and discovers the SQL injection vulnerabilities but one that 
		exploits any such existing vulnerability to gain OS access.

		First, cd to /usr/share/doc/sqlninja
		Then, extract sqlninja.conf.example.gz
		Then, rename it to sqlninja.conf, and copy it to /usr/share/sqlninja/
		Finally, edit the sqlninja.conf file to match your requirements, then run.

=============================================================================================================

==============================
| Web Application Assessment |
==============================

The tools presented in this section mainly focus on the front-end security of web
infrastructure. 
They can be used to identify, analyze, and exploit a wide range
of application security vulnerabilities. These include cross-site scripting (XSS),
SQL injection, SSI injection, XML injection, application misconfiguration, abuse of
functionality, session prediction, information disclosure, and many other attacks and
weaknesses.

	- Burp Suite
		Burp Suite is a combination of powerful web application security tools. 
		These tools demonstrate the real-world capabilities of an attacker penetrating web
		applications. 
		They can scan, analyze, and exploit web applications using manual
		and automated techniques. 
		The integration facility between the interfaces of these tools provides a complete attack platform to 
		share information between one or more tools. 
		This makes the Burp Suite a very effective and easy-to-use web application attack framework.

		The following is an example from a book:

		1. First, navigate to Proxy | Options and verify the proxy listeners property. In
		our case, we left the default settings to listen on port 8080. More options such
		as host redirection, SSL certificate, client request interception, server response
		interception, page properties, and header modifications can be used to match
		your application's assessment criteria.

		2. Navigate to Proxy | Intercept and verify that the intercept is on tab is
		enabled.

		3. Open your favorite browser (Firefox, for example) and set up the local proxy
		for HTTP/HTTPs transactions (127.0.0.1, 8080) to intercept, inspect, and
		modify the requests between the browser and target web application. All
		the consequent responses will be recorded accordingly. Here, the Burp Suite
		application acts as the man-in-the-middle (MITM) proxy.

		4. Surf the target website (for example, http://testphp.example.com) and
		you will notice that the request has been trapped under Proxy | Intercept. In
		our case, we decide to forward this request without any modification. If you
		decide to modify any such request, you can do so with the Raw, Headers,
		or Hex tabs. Note that any other target application resources (for example,
		images and flash files) might generate individual requests while accessing
		the index page.

		5. We strongly recommend you to visit as many pages as possible and try
		to help Burp Suite index the list of available pages mainly with the GET
		and POST requests. You can also use Spider to automate this process. To
		accomplish indexing with Spider, navigate to Target | Site map, right-click
		on your target website (for example, http://testphp.example.com), and
		select spider this host. This will help you discover and scan the number of
		available pages automatically and follow up any form requests manually
		(for example, the login page). Once this operation is over, you can navigate
		to Target | Site map and check the right-side panel with the list of accessible
		web pages and their properties (methods, URLs, parameters, response code,
		and so on).

		6. Select a web page with the GET or POST parameters in order to test it
		with Intruder. The key is to enumerate possible identifiers, harvest useful
		data, and fuzz the parameters for known vulnerabilities. Right-click on the
		selected request and choose send to intruder. In our case, we select http://
		testphp.example.com/listproducts.php?artist=2 to find out the known
		vulnerabilities by injecting the variable length of characters instead of 2.

		7. In the next step, we define the attack type and payload position (Intruder
		| Positions) to automate our test cases. The notification for the payload
		placement is given by the §2§ signature. We then step into the Intruder
		| Payloads section to choose the specific payload from a predefined list,
		Character blocks. Remember, you can also specify your own custom
		payload. Once the whole setting is in place, navigate to Intruder | Start in
		the menu bar. This will pop up another window that lists all requests being
		executed against the target application. After these requests have been
		processed as per the chosen payload, we decide to compare certain responses
		in order to identify unexpected application behavior. This can be done by
		simply right-clicking on the selected request and choosing send to comparer.
		At least two or more different requests or responses can be compared
		based on words or bytes. To learn more about different attack types visit
		http://www.portswigger.net/burp/help/intruder_positions.
		html#attacktype, while to understand the payload types payload options,
		visit http://www.portswigger.net/burp/help/intruder_payloads_
		types.html.

		8. During the response comparison, we discovered the SQL injection vulnerability
		with one of our payload requests. Hence, to verify its authenticity, we decided
		to simulate that request again with Repeater by right-clicking on it and
		selecting send request to repeater instead of selecting comparer from a
		pop-up window. Click on the go button under the Repeater tab in order to get
		a response for the desired request. You will notice the response instantly. In our
		case, we notice the following error in a response page:
		Error: Unknown column 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAA' in 'where clause'
		Warning : mysql_fetch_array(): supplied argument is not a
		valid MySQL result resource in
		/var/www/vhosts/default/htdocs/listproducts.php on line 74

		9. This clearly shows us the possibility of the SQL injection vulnerability.
		Beside these kind of weaknesses, we can also test our application session
		tokens for randomness using sequencer to uncover the session prediction
		vulnerability. The basic use of sequencer has been mentioned at http://
		www.portswigger.net/suite/sequencerhelp.html

	- Nikto2
		Nikto2 is a basic web server security scanner. 
		It scans and detects the security vulnerabilities caused by server misconfiguration, 
		default and insecure files, and outdated server application. 
		Nikto2 is purely built on LibWhisker2, and thus supports cross-platform deployment, SSL, 
		host authentication methods (NTLM/Basic),
		proxies, and several IDS evasion techniques. It also supports subdomain enumeration,
		application security checks (XSS, SQL injection, and so on), and is capable of guessing
		the authorization credentials using a dictionary-based attack method.

		Find usage info @ https://cirt.net/nikto2-docs/

	- Paros proxy
		Paros proxy is a valuable and intensive vulnerability assessment tool. It spiders
		through the entire website and executes various vulnerability tests. It also allows
		an auditor to intercept the web traffic (HTTP/HTTPs) by setting up the local proxy
		between the browser and the actual target application. This mechanism helps an
		auditor tamper or manipulate with particular requests being made to the target
		application in order to test it manually. Thus, Paros proxy acts as an active and
		passive web application security assessment tool.
		
		Typing 'paros' in the terminal will bring up the Paros proxy window. Before you go through any practical
		exercises, you need to set up a local proxy (127.0.0.1, 8080) in your favorite
		browser. If you need to change any default settings, navigate to Tools | Options
		in the menu bar. This will allow you to modify the connection settings, local proxy
		values, HTTP authentication, and other relevant information. Once your browser has
		been set up, visit your target website. 
		The following are the steps for vulnerability testing and obtaining its report:

		1. In our case, we browse through [host address] and notice
		that it has appeared under the Sites tab of Paros Proxy.

		2. Right-click on [host address] and choose Spider to crawl
		through the entire website. This will take some minutes depending on how
		big your website is.

		3. Once the website crawling has finished, you can see all the discovered pages
		in the Spider tab at the bottom. Additionally, you can chase up the particular
		request and response for a desired page by selecting the target website and
		choosing a specific page on the left-hand panel of the Sites tab.

		4. In order to trap any further requests and responses, go to the Trap tab on the
		right-hand panel. This is particularly useful when you decide to throw some
		manual tests against the target application. Moreover, you can also construct
		your own HTTP request by navigating to Tools | Manual Request Editor.

		5. To execute the automated vulnerability testing, we select the target website
		under the Sites tab and navigate to Analyze | Scan All from the menu. Note
		that you can still select the specific types of security tests by navigating to
		Analyze | Scan Policy and then navigating to Analyze | Scan instead of
		selecting Scan All.

		6. Once the vulnerability testing is complete, you can see a number of security
		alerts on the Alerts tab at the bottom. These are categorized as the High,
		Low, and Medium type risk levels.

		7. If you would like to have the scan report, navigate to Report | Last
		Scan Report in the menu bar. This will generate a report that lists all the
		vulnerabilities found during the test session.

		For more info on the usage, follow the link:
		http://www.i-pi.com/Training/SecTesting/paros_user_guide.pdf