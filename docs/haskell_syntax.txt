:? -- Views a big help message in ghci

:set prompt "something" -- Sets the prompt to some string

:module something/:m something -- Loads some module

-- All arithmetic operators work, negative values MUST be enclosed in paranthesis, prefix notation
is supported but the operator MUST be enclosed betweeen parenthesis.

-- && is logical AND and || is logical OR.

-- /= is the "not equal", using the word "not" before True/False negates it.

-- ** is the same as ^, but works for both integer types and floats.

-- [1..10] creates a list from 1 to 10 inclusive, with a step of 1.

-- [1,3..10] creates a list from 1 to 10 inclusive, with a step of 2.

-- ++ is used to append two lists or two strings together.

-- : is used to append an element to a list, the element must come before the list.

-- \n is a new line, \t is a tab.

-- putStrLn prints a string then a new line.

-- putStr prints a string.

-- :set +t tells ghci to print the type of some expression after printing it, can be removed
by using :unset +t.

-- "it" is the last value used.

-- runghc file.hs < something.txt runs a haskell file and takes a txt file as input.

-- head [1,2,3] returns 1, the first element of a list.

-- tail [1,2,3] returns [2,3], the tail of a list, which is a list.

-- take 2 [1,2,3,4,5] returns [1,2], which is a list of the 
first 2 elements of the list.

-- drop 3 [1,2,3,4,5] returns [4,5], which is a list of all 
the elements of the list but the first three.

-- last [1,2,3,4,5] returns 5, the last element in the list.

-- fst (1,'a') returns 1, the first argument in a tuple (pair).

-- snd (1,'a') returns 'a', the second argument in a tuple (pair).

-- lines "hello\nworld" returns ["hello","world"]