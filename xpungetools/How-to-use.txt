This will guide you through the usage of each of the tools listed in this repo

arpscan.py : This tool scans the network using ARP requests and prints the IPs of the present hosts, given the interface.
	Usage : python arpscan.py <interface>
arpscan2.py : This tool scans the network using ARP requests, it takes a list of IPs as an input and prints if the given IPs are alive or not.
	Usage : python arpscan2.py <iplist>
arping.sh : This tool uses the arping tool to discover all live hosts on the network, given the interface.
	Usage : sh arping.sh <interface>
arping2.sh : This tool uses the arping tool to discover all live hosts on the network, given a list of IPs to scan.
	Usage : sh arping2.sh <iplist>
ping_sweep.sh : This tool uses ping ICMP requests to discover the live hosts on the network, given the network IP.
	Usage : sh ping_sweep.sh <network-ip>
pinger.py : This tool uses ping ICMP requests to discover the live hosts on the network, given the network IP.
	Usage : python pinger.py <network-ip>
pinger2.py : This tool uses ping ICMP requests to discover the live hosts on the network, given a list of IPs to scan.
	Usage : python pinger2.py <iplist>
hping3r.sh : This tool uses the hping3 tool to ping all the IPs on the network, given the network IP.
	Usage : sh hping3r.sh <network-ip>
ack_ping.py : This tool sends TCP ACK requests to each device on the network to check if it's alive or not, given the network IP.
	Usage : python ack_ping.py <network-ip>
udp_sweep.sh : This tool uses the hping3 tool to scan the network using UDP, given the network IP.
	Usage : sh udp_sweep.sh <network-ip>
udp_port_scan.py : This tool uses UDP requests to test for open ports within a given range.
	Usage : python udp_port_scan.py <ip> <start-port> <end-port>
syn_scan.py : This tool uses TCP SYN requests to test for open ports within a given range.
	Usage : python syn_scan.py <ip> <start-port> <end-port> 
zombie_scan.py : This tool can check a host if it can be used as a zombie or not, and performs zombie scan.
	Usage : python zombie_scan.py
banner_grab.py : This tool is used for banner grabbing, given the IP and starting and ending ports.
	Usage : python banner_grab.py <ip> <start-port> <end-port>
os_id_ttl.py : This tool is used to identify OSs depending on the ttl of the repsponse when the target is pinged with ICMP requests.
	Usage : python os_id_ttl.py <ip>
firewall_ack_scan.py : This tool is for scanning a port on a target system for firewalls.
	Usage : python firewall_ack_scan.py <ip> <port>
listener.py : A server that listens to ICMP requests.
	Usage : python listener.py
ftp_fuzz.py : This tool exploits the CVE-2006-2961 vulnerability which is associated with the Cesar0.99 FTP Service, given the ip, FTP port (usually 21), interval, and maximum characters to be sent.
	Usage : python ftp_fuzz.py <ip> <port> <interval> <maximum>
